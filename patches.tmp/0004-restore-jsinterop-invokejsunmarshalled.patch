From bd89e941943e55a8be1d601c5940f03ae254b09c Mon Sep 17 00:00:00 2001
From: Jerome Laban <jerome@platform.uno>
Date: Mon, 14 Aug 2023 19:01:00 +0000
Subject: [PATCH] restore-jsinterop-invokejsunmarshalled

---
 src/mono/wasm/runtime/corebindings.c          |  23 ++++
 src/mono/wasm/runtime/cwraps.ts               |  10 ++
 src/mono/wasm/runtime/driver.c                |  11 ++
 src/mono/wasm/runtime/exports-binding.ts      |   9 ++
 src/mono/wasm/runtime/globals.ts              |   4 +
 src/mono/wasm/runtime/loader/globals.ts       |   3 +-
 .../wasm/runtime/net6-legacy/method-calls.ts  | 122 +++++++++++++++++-
 src/mono/wasm/runtime/strings.ts              |  19 ++-
 8 files changed, 196 insertions(+), 5 deletions(-)

diff --git a/src/mono/wasm/runtime/corebindings.c b/src/mono/wasm/runtime/corebindings.c
index e12a0adc379..562d50a8bf6 100644
--- a/src/mono/wasm/runtime/corebindings.c
+++ b/src/mono/wasm/runtime/corebindings.c
@@ -60,6 +60,23 @@ extern int mono_wasm_get_culture_info(MonoString **culture, const uint16_t* resu
 extern int mono_wasm_get_first_day_of_week(MonoString **culture, int *is_exception, MonoObject** ex_result);
 extern int mono_wasm_get_first_week_of_year(MonoString **culture, int *is_exception, MonoObject** ex_result);
 
+/* BEGIN Uno specific interop */
+extern void* mono_wasm_invoke_js_unmarshalled (MonoString **exceptionMessage, MonoString *funcName, void* arg0, void* arg1, void* arg2);
+extern void mono_wasm_invoke_on_main_thread ();
+extern void mono_threads_wasm_async_run_in_main_thread (void (*func) (void));
+extern MonoString* mono_wasm_invoke_js (MonoString *str, int *is_exception);
+extern void mono_wasm_proxy_invoke_on_main_thread();
+
+void mono_wasm_proxy_invoke_on_main_thread() {
+#ifndef DISABLE_THREADS
+	mono_threads_wasm_async_run_in_main_thread (mono_wasm_invoke_on_main_thread);
+#else
+	printf("mono_wasm_proxy_invoke_on_main_thread: Threading is disabled");
+	assert(0);
+#endif
+}
+/* END Uno specific interop */
+
 void bindings_initialize_internals (void)
 {
 	mono_add_internal_call ("Interop/Runtime::ReleaseCSOwnedObject", mono_wasm_release_cs_owned_object);
@@ -101,4 +118,10 @@ void bindings_initialize_internals (void)
 	mono_add_internal_call ("Interop/JsGlobalization::GetCultureInfo", mono_wasm_get_culture_info);
 	mono_add_internal_call ("Interop/JsGlobalization::GetFirstDayOfWeek", mono_wasm_get_first_day_of_week);
 	mono_add_internal_call ("Interop/JsGlobalization::GetFirstWeekOfYear", mono_wasm_get_first_week_of_year);
+
+	/* BEGIN Uno specific interop */
+	mono_add_internal_call ("WebAssembly.JSInterop.InternalCalls::InvokeJSUnmarshalled", mono_wasm_invoke_js_unmarshalled);
+	mono_add_internal_call ("WebAssembly.JSInterop.InternalCalls::InvokeOnMainThread", mono_wasm_proxy_invoke_on_main_thread);
+	mono_add_internal_call ("Interop/Runtime::InvokeJS", mono_wasm_invoke_js);
+	/* END Uno specific interop */
 }
\ No newline at end of file
diff --git a/src/mono/wasm/runtime/cwraps.ts b/src/mono/wasm/runtime/cwraps.ts
index 56317d5f3da..49d165396b7 100644
--- a/src/mono/wasm/runtime/cwraps.ts
+++ b/src/mono/wasm/runtime/cwraps.ts
@@ -8,6 +8,7 @@ import type {
     MonoArray, MonoAssembly, MonoClass,
     MonoMethod, MonoObject,
     MonoType, MonoObjectRef, MonoStringRef, JSMarshalerArguments
+    , MonoString
 } from "./types/internal";
 import type { VoidPtr, CharPtrPtr, Int32Ptr, CharPtr, ManagedPointer } from "./types/emscripten";
 import { linkerDisableLegacyJsInterop, linkerEnableAotProfiler, linkerEnableBrowserProfiler, Module } from "./globals";
@@ -75,6 +76,9 @@ const fn_signatures: SigLine[] = [
     [true, "mono_wasm_assembly_get_entry_point", "number", ["number", "number"]],
     [true, "mono_wasm_class_get_type", "number", ["number"]],
 
+    // Uno Specific
+    [true, "mono_wasm_string_from_js", "number", ["string"]],
+
     //INTERNAL
     [false, "mono_wasm_exit", "void", ["number"]],
     [false, "mono_wasm_abort", "void", []],
@@ -206,6 +210,12 @@ export interface t_Cwraps {
     mono_wasm_assembly_get_entry_point(assembly: MonoAssembly, idx: number): MonoMethod;
     mono_wasm_intern_string_ref(strRef: MonoStringRef): void;
 
+    // Uno Specific
+    /**
+     * @deprecated Not GC or thread safe
+     */
+    mono_wasm_string_from_js(str: string): MonoString;
+
     //INTERNAL
     mono_wasm_exit(exit_code: number): void;
     mono_wasm_abort(): void;
diff --git a/src/mono/wasm/runtime/driver.c b/src/mono/wasm/runtime/driver.c
index c4e0679579c..b7a893acffb 100644
--- a/src/mono/wasm/runtime/driver.c
+++ b/src/mono/wasm/runtime/driver.c
@@ -726,6 +726,17 @@ mono_wasm_assembly_get_entry_point (MonoAssembly *assembly, int auto_insert_brea
 	return method;
 }
 
+EMSCRIPTEN_KEEPALIVE MonoString *
+mono_wasm_string_from_js (const char *str)
+{
+	PVOLATILE(MonoString) result = NULL;
+	MONO_ENTER_GC_UNSAFE;
+	if (str)
+		result = mono_string_new (root_domain, str);
+	MONO_EXIT_GC_UNSAFE;
+	return result;
+}
+
 EMSCRIPTEN_KEEPALIVE void
 mono_wasm_string_from_utf16_ref (const mono_unichar2 * chars, int length, MonoString **result)
 {
diff --git a/src/mono/wasm/runtime/exports-binding.ts b/src/mono/wasm/runtime/exports-binding.ts
index 834c9b4588b..6b3c865d382 100644
--- a/src/mono/wasm/runtime/exports-binding.ts
+++ b/src/mono/wasm/runtime/exports-binding.ts
@@ -29,6 +29,10 @@ import { mono_wasm_install_js_worker_interop, mono_wasm_uninstall_js_worker_inte
 import {
     mono_wasm_invoke_js_blazor, mono_wasm_invoke_js_with_args_ref, mono_wasm_get_object_property_ref, mono_wasm_set_object_property_ref,
     mono_wasm_get_by_index_ref, mono_wasm_set_by_index_ref, mono_wasm_get_global_object_ref
+    , // Uno Platform specific interop
+    mono_wasm_invoke_js_unmarshalled,
+    mono_wasm_invoke_on_main_thread,
+    mono_wasm_invoke_js
 } from "./net6-legacy/method-calls";
 import { mono_wasm_create_cs_owned_object_ref } from "./net6-legacy/cs-to-js";
 import { mono_wasm_typed_array_to_array_ref } from "./net6-legacy/js-to-cs";
@@ -98,6 +102,11 @@ export const mono_wasm_imports = [
     mono_wasm_set_entrypoint_breakpoint,
     mono_wasm_event_pipe_early_startup_callback,
 
+    // Uno-platform specific interop
+    mono_wasm_invoke_js_unmarshalled,
+    mono_wasm_invoke_on_main_thread,
+    mono_wasm_invoke_js,
+
     // corebindings.c
     mono_wasm_release_cs_owned_object,
     mono_wasm_bind_js_function,
diff --git a/src/mono/wasm/runtime/globals.ts b/src/mono/wasm/runtime/globals.ts
index 5db69fc91bf..ba86703dd7f 100644
--- a/src/mono/wasm/runtime/globals.ts
+++ b/src/mono/wasm/runtime/globals.ts
@@ -14,6 +14,10 @@ import type { GlobalObjects, EmscriptenInternals, RuntimeHelpers, LoaderHelpers,
 export let Module: DotnetModuleInternal;
 export let INTERNAL: any;
 
+// Uno-specific
+
+export let BINDING: any;
+
 export const ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
 export const ENVIRONMENT_IS_WEB = typeof window == "object";
 export const ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
diff --git a/src/mono/wasm/runtime/loader/globals.ts b/src/mono/wasm/runtime/loader/globals.ts
index a710ea0cb3b..3180c5b7258 100644
--- a/src/mono/wasm/runtime/loader/globals.ts
+++ b/src/mono/wasm/runtime/loader/globals.ts
@@ -55,7 +55,8 @@ export function setLoaderGlobals(
     });
 
     Object.assign(globalObjects.module, {
-        disableDotnet6Compatibility: true,
+        // Uno specific restore .NET 6 compatibility on Module
+        disableDotnet6Compatibility: false,
         config: { environmentVariables: {} }
     });
     Object.assign(runtimeHelpers, {
diff --git a/src/mono/wasm/runtime/net6-legacy/method-calls.ts b/src/mono/wasm/runtime/net6-legacy/method-calls.ts
index 825e5e7d410..74cafe13efd 100644
--- a/src/mono/wasm/runtime/net6-legacy/method-calls.ts
+++ b/src/mono/wasm/runtime/net6-legacy/method-calls.ts
@@ -2,18 +2,21 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 import { get_js_obj, mono_wasm_get_jsobj_from_js_handle } from "../gc-handles";
-import { Module, INTERNAL, loaderHelpers } from "../globals";
+import { Module, INTERNAL, loaderHelpers, BINDING } from "../globals";
 import { wrap_error_root, wrap_no_error_root } from "../invoke-js";
 import { _release_temp_frame } from "../memory";
 import { mono_wasm_new_external_root, mono_wasm_new_root } from "../roots";
 import { find_entry_point } from "../run";
 import { monoStringToString, stringToMonoStringRoot } from "../strings";
-import { JSHandle, MonoStringRef, MonoObjectRef, MonoArray, MonoString, MonoObject, is_nullish, WasmRoot } from "../types/internal";
+import { JSHandle, MonoStringRef, MonoObjectRef, MonoArray, MonoString, MonoObject, is_nullish, WasmRoot, MonoStringNull } from "../types/internal";
 import { Int32Ptr, VoidPtr } from "../types/emscripten";
 import { mono_array_root_to_js_array, unbox_mono_obj_root } from "./cs-to-js";
 import { js_array_to_mono_array, js_to_mono_obj_root } from "./js-to-cs";
 import { Converter, BoundMethodToken, mono_method_resolve, mono_method_get_call_signature_ref, mono_bind_method, assert_legacy_interop } from "./method-binding";
 
+import { mono_wasm_symbolicate_string } from "../logging";
+import type { EmscriptenModule } from "../types/emscripten";
+
 const boundMethodsByFqn: Map<string, Function> = new Map();
 
 export function _teardown_after_call(
@@ -305,3 +308,118 @@ export function mono_wasm_invoke_js_blazor(exceptionMessage: Int32Ptr, callInfo:
         return 0;
     }
 }
+
+// Uno Platform specific interop
+// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+export function mono_wasm_invoke_js_unmarshalled(exceptionMessage: Int32Ptr, funcName: MonoString, arg0: any, arg1: any, arg2: any): void | number {
+    try {
+        const funcNameRoot = mono_wasm_new_root<MonoString>();
+        funcNameRoot.set(funcName);
+
+        // Get the function you're trying to invoke
+        const funcNameJsString = monoStringToString(funcNameRoot);
+
+        funcNameRoot.release();
+
+        const dotNetExports = (<any>globalThis).DotNet;
+        if (!dotNetExports) {
+            throw new Error("The Microsoft.JSInterop.js library is not loaded.");
+        }
+        const funcInstance = dotNetExports.jsCallDispatcher.findJSFunction(funcNameJsString);
+
+        return funcInstance.call(null, arg0, arg1, arg2);
+    } catch (ex: any) {
+        const exceptionJsString = ex.message + "\n" + ex.stack;
+        const exceptionRoot = mono_wasm_new_root<MonoString>();
+        stringToMonoStringRoot(exceptionJsString, exceptionRoot);
+        exceptionRoot.copy_to_address(<any>exceptionMessage);
+        exceptionRoot.release();
+        return 0;
+    }
+}
+
+
+// code like `App.call_test_method();`
+export function mono_wasm_invoke_js(code: MonoString, is_exception: Int32Ptr): MonoString | null {
+    if (code === MonoStringNull)
+        return MonoStringNull;
+
+    const codeRoot = mono_wasm_new_root<MonoString>();
+    codeRoot.set(code);
+
+    // Get the function you're trying to invoke
+    const js_code = monoStringToString(codeRoot)!;
+
+    codeRoot.release();
+
+    try {
+        const closedEval = function (Module: EmscriptenModule, BINDING: any, INTERNAL: any, code: string) {
+            return eval(code);
+        };
+        const res = closedEval(Module, BINDING, INTERNAL, js_code);
+        Module.setValue(is_exception, 0, "i32");
+        if (typeof res === "undefined" || res === null)
+            return MonoStringNull;
+
+        const exceptionRoot = mono_wasm_new_root<MonoString>();
+        stringToMonoStringRoot(res.toString(), exceptionRoot);
+
+        return exceptionRoot.value;
+    } catch (ex) {
+        return wrap_error(is_exception, ex);
+    }
+}
+
+// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+export function mono_wasm_invoke_on_main_thread(): void {
+    const dotNetExports = (<any>globalThis).DotNet;
+    if (!dotNetExports) {
+        throw new Error("The Microsoft.JSInterop.js library is not loaded.");
+    }
+
+    if (!dotNetExports.invokeOnMainThread) {
+        throw new Error("The DotNet.invokeOnMainThread method is not available.");
+    }
+
+    dotNetExports.invokeOnMainThread();
+}
+
+/**
+ * @deprecated Not GC or thread safe
+ */
+// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+export function wrap_error(is_exception: Int32Ptr | null, ex: any): MonoString {
+    const res = _wrap_error_flag(is_exception, ex);
+
+    const resRoot = mono_wasm_new_root<MonoString>();
+    stringToMonoStringRoot(res, resRoot);
+
+    const result = resRoot.value;
+    
+    resRoot.release();
+
+    return result;
+}
+
+// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
+function _wrap_error_flag(is_exception: Int32Ptr | null, ex: any): string {
+    let res = "unknown exception";
+    if (ex) {
+        res = ex.toString();
+        const stack = ex.stack;
+        if (stack) {
+            // Some JS runtimes insert the error message at the top of the stack, some don't,
+            //  so normalize it by using the stack as the result if it already contains the error
+            if (stack.startsWith(res))
+                res = stack;
+            else
+                res += "\n" + stack;
+        }
+
+        res = mono_wasm_symbolicate_string(res);
+    }
+    if (is_exception) {
+        Module.setValue(is_exception, 1, "i32");
+    }
+    return res;
+}
diff --git a/src/mono/wasm/runtime/strings.ts b/src/mono/wasm/runtime/strings.ts
index f4cfa442386..b0bf7c79bb9 100644
--- a/src/mono/wasm/runtime/strings.ts
+++ b/src/mono/wasm/runtime/strings.ts
@@ -1,7 +1,7 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-import { mono_wasm_new_root_buffer } from "./roots";
+import { mono_wasm_new_root_buffer, mono_wasm_new_root } from "./roots";
 import { MonoString, MonoStringNull, WasmRoot, WasmRootBuffer } from "./types/internal";
 import { Module } from "./globals";
 import cwraps from "./cwraps";
@@ -251,4 +251,19 @@ export function viewOrCopy(view: Uint8Array, start: CharPtr, end: CharPtr): Uint
     return needsCopy
         ? view.slice(<any>start, <any>end)
         : view.subarray(<any>start, <any>end);
-}
\ No newline at end of file
+}
+
+/* UNO SPECIFIC */
+export function conv_string(mono_obj: MonoString): string | null {
+
+    const codeRoot = mono_wasm_new_root<MonoString>();
+    codeRoot.set(mono_obj);
+
+    // Get the function you're trying to invoke
+    const js_code = monoStringToString(codeRoot)!;
+
+    codeRoot.release();
+
+    return js_code;
+}
+/* UNO SPECIFIC */
-- 
2.25.1

